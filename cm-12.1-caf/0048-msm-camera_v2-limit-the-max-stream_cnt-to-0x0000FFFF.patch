From 9163deb3b433adacefee896065e1818d93934215 Mon Sep 17 00:00:00 2001
From: Fei Zhang <feizhang@codeaurora.org>
Date: Thu, 24 Jul 2014 11:15:10 +0800
Subject: [PATCH 48/50] msm: camera_v2: limit the max stream_cnt to 0x0000FFFF

In userspace, the stream id will be rounded by 0x0000FFFF when
packed into identity, which will cause stream id mis-match problem
if we keep increasing stream_cnt beyond 0x0000FFFF. So we also need
limit the max stream_cnt correspodint to userspace.

Change-Id: I65b064762be9fc8389f1fcde3c6602e2f2f68410
Signed-off-by: Fei Zhang <feizhang@codeaurora.org>
Signed-off-by: BambooIV <ningdisheng@gmail.com>
---
 drivers/media/platform/msm/camera_v2/camera/camera.c | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/drivers/media/platform/msm/camera_v2/camera/camera.c b/drivers/media/platform/msm/camera_v2/camera/camera.c
index 2d32ed3..3d51455 100644
--- a/drivers/media/platform/msm/camera_v2/camera/camera.c
+++ b/drivers/media/platform/msm/camera_v2/camera/camera.c
@@ -34,6 +34,7 @@
 
 #define fh_to_private(__fh) \
 	container_of(__fh, struct camera_v4l2_private, fh)
+#define MAX_STREAM_ID 0x0000FFFF
 
 struct camera_v4l2_private {
 	struct v4l2_fh fh;
@@ -592,6 +593,13 @@ static int camera_v4l2_open(struct file *filep)
 
 	atomic_add(1, &pvdev->opened);
 	atomic_add(1, &pvdev->stream_cnt);
+
+	/*when pack session and stream id in userspace, max stream id is 0x0000FFFF*/
+	if(atomic_read(&pvdev->stream_cnt) > MAX_STREAM_ID) {
+		pr_err("%s: stream id exceeds %d, rotated to 1\n",
+			__func__, MAX_STREAM_ID);
+		atomic_set(&pvdev->stream_cnt, 1);
+	}
 	return rc;
 
 post_fail:
-- 
1.9.1

